----------------------------------------------------------------------------------
-- Company: 
-- Engineer: 
-- 
-- Create Date: 14.11.2024 14:14:18
-- Design Name: 
-- Module Name: random_number - Behavioral
-- Project Name: 
-- Target Devices: 
-- Tool Versions: 
-- Description: 
-- 
-- Dependencies: 
-- 
-- Revision:
-- Revision 0.01 - File Created
-- Additional Comments:
-- 
----------------------------------------------------------------------------------
library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.STD_LOGIC_ARITH.ALL;
use IEEE.STD_LOGIC_UNSIGNED.ALL;

entity LFSR_Random_Generator is
    Port ( clk               : in std_logic;               -- Reloj de entrada
           reset             : in std_logic;               -- Reset
           random_number_out : out std_logic_vector(4 downto 0)  -- Salida de 5 bits
           );
end LFSR_Random_Generator;

architecture Behavioral of LFSR_Random_Generator is

    signal lfsr : std_logic_vector(4 downto 0) := "10101"; -- Semilla inicial

begin

    -- Proceso que genera los números pseudoaleatorios en cada flanco de subida del reloj
    process(clk, reset)
    begin
        if reset = '1' then
            -- Si se activa el reset, se carga la semilla inicial
            lfsr <= "10101"; -- Semilla inicial (nunca todo cero)
        elsif rising_edge(clk) then
            -- Cálculo del feedback: XOR de los bits especificados (taps)
            -- Tap en las posiciones 4 y 1
            lfsr(4) <= lfsr(4) xor lfsr(1);  -- Feedback calculado por XOR
            -- Desplazamos el registro, exceptuando el bit de feedback
            lfsr(3 downto 0) <= lfsr(4 downto 1);  -- Desplazamos el resto de los bits
        end if;
    end process;

    -- La salida del generador aleatorio es el valor del registro LFSR
    random_number_out <= lfsr;

end Behavioral;
